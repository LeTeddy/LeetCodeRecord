package T62;

/*一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
问总共有多少条不同的路径？
示例 1：
输入：m = 3, n = 7
输出：28
示例 2：
输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右
3. 向下 -> 向右 -> 向下
示例 3：
输入：m = 7, n = 3
输出：28
示例 4：
输入：m = 3, n = 3
输出：6 */
//就是说回溯算法和动态规划有啥不同呢：
//这个回溯算法就需要亲历亲为，每条路径要走一遍，要递归进去，探完路后再回溯回来。但动态规划就是说我可以从前面的信息推出这次探路的结果，不用说是我真正去探一下路。
//还有就是 回溯算法因为亲力亲为了，所以他知道每条路径是怎么走的。但动态规划就不知道，他只知道会是这么多解，但不知道各自是什么。
public class Solution {
  public static void main(String[] args) {
    Solution so = new Solution();
    so.uniquePaths(3,7);
  }
  // 这种得拿笔演算一下，找出不变的东西，就是1.dp数组的初始化方式 2.动态变化的方式 3.dp数组的含义
  // 像这个题：dp数组的含义就是到达某行某列的不同路径数量
  // 动态变化的方式是固定的，只能往右或往下走
  // 那么，第一行中所有列，只有一种不同路径，只能通过不同往右走到达
  // 同理第一列中所有行，只有一种不同路径，只能通过不同往下走到达
  public int uniquePaths(int m, int n) {
    int[][] dp = new int[m][n];
    for (int i = 0; i < n; i++) {
      dp[0][i] = 1;
    }
    for (int i = 0; i < m; i++) {
      dp[i][0] = 1;
    }
    for(int i = 1; i < m;i++){
      for(int j = 1;j < n;j++){
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
      }
    }
    return dp[m - 1][n - 1];
  }
}

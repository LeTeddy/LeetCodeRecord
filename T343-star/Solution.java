package T343;

/*给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
返回 你可以获得的最大乘积 。
示例 1:
输入: n = 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:
输入: n = 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。 */
class Solution {
  //这题，不是我自己想出来的。我复盘一下
  public int integerBreak(int n) {
    int[] dp = new int[n + 1];
    dp[1] = 0;
    dp[2] = 1;
    for (int i = 3; i <= n; i++) {
      for (int j = 1; j <= i / 2;j++){
        //拆分，那就分两种情况。拆成俩数和俩数以上。但不管怎么样拆，dp数组里就是存最大乘积。
        //所以下一个数在算的时候就是，拆成俩和俩数以上，拆成俩就循环的来算就行。拆成俩数以上就循环一个数与其他拆法的乘积最大值。
        dp[i] = Math.max(Math.max(j * dp[i - j], j * (i - j)), dp[i]);
      }
    }
    return dp[n];
  }
}
package T1049;

import java.util.Arrays;

/*有一堆石头，每块石头的重量都是正整数。
每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
如果 x == y，那么两块石头都会被完全粉碎；
如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。
示例：
输入：[2,7,4,1,8,1]
输出：1
解释：
先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]，
再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]，
接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]，
最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。 */
class Solution {
  // 这道题比较难想，俩石头相撞剩下的相当于俩石头重量的差
  // 如果将石头分成两堆，这两堆重量相近，每次从两堆中取最大的相撞，相当于两堆各损失了较小的那块石头的重量。两堆石头的总重量差不变
  // 背包划分的话就能保证其中一堆的重量最大化的接近sum/2，也就是有块小石头放背包这一堆，就超了。
  // 那俩堆石头互怼，剩下的就是那块无处安放的小石头碰撞完之后剩下的重量，就是结果
  // 这题还是利用背包的最大化原则，让价值和重量相同，尽量塞满
  // 让价值和重量相同的背包问题，就是尽量装满，不考虑价值了，或者说，价值就是重量，装得越重越好
  public int lastStoneWeightII(int[] stones) {
    int sum = Arrays.stream(stones).sum();
    int target = sum / 2;
    int[] dp = new int[target + 1];
    // 遍历物品
    for (int i = 0; i < stones.length; i++) {
      for (int j = target; j >= stones[i]; j--) {
        dp[j] = Math.max(dp[j], dp[j - stones[i]] + stones[i]);
      }
    }
    return sum - 2 * dp[target];
  }
}
